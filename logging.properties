############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################
############################################################
#  	Global properties
############################################################
# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
handlers=java.util.logging.ConsoleHandler
# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level=INFO
############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################
# default file output is in user's home directory.
java.util.logging.FileHandler.pattern=%h/java%u.log
java.util.logging.FileHandler.limit=50000
java.util.logging.FileHandler.count=1
java.util.logging.FileHandler.formatter=java.util.logging.XMLFormatter
# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level=FINER
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
# Example to customize the SimpleFormatter output format
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
#linux:
java.util.logging.SimpleFormatter.format=%1$tM:%1$tS.%1$tL %4$-7s: %5$-120s, %2$s %6$s%n
############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
#   -Djava.util.logging.config.file=logging.properties
#   INFO FINE FINER FINEST
#com.bsteele.bsteeleMusicApp.server.BSteeleMusicAppServer = FINE
#com.bsteele.bsteeleMusicApp.client.application.BSteeleMusicIO=FINE
#com.bsteele.bsteeleMusicApp.client.presenterWidgets.LyricsAndChordsViewImpl=FINEST
#com.bsteele.bsteeleMusicApp.client.presenterWidgets.SongEditView=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.SongBaseTest.level=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.SongBase.level=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.MeasureRepeatTest.level=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.SongEditTest.level=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.SongEntryTest.level=FINEST
#com.bsteele.bsteeleMusicApp.client.songs.SongTest.level=FINE
#com.bsteele.bsteeleMusicApp.shared.songs.KeyTest.level=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.ChordSection.level=FINE
#com.bsteele.bsteeleMusicApp.shared.songs.ChordSectionTest.level=FINE
com.bsteele.bsteeleMusicApp.shared.songs.SongPlayerTest.level=FINEST
#com.bsteele.bsteeleMusicApp.shared.songs.ChordTest.level=FINE

